[FileType]
type = csv

[General]
input_file = .\sample_case\gicc\offset_flatten_rsm_30_all.csv
output_file = .\sample_case\gicc\output.csv

[Position]
relative_position = False

[Security]
encrypted = True

[Json]
; 如果FileType的type是json, 需要指定record_path与meta, 这两个是pandas.json_normalize()中需要的参数；如果type是其他类型, 则这个section不需要写任何东西
; record_path = ['data', 'rsms', 'participants']
; meta = [['data', 'timestamp'], ['data', 'rsms', 'refPos', 'lon'], ['data', 'rsms', 'refPos', 'lat']]

[Const]
GPS = True
OriginLat = 23.023899623618
OriginLon = 113.488177461743

[ColumnSettings]
ID = ptcId
Time = data.timestamp
PositionX = pos.lat
PositionY = pos.lon
PositionZ = None
Length = size.length
Width = size.width
Height = size.height
Yaw = heading
Pitch = None
Roll = None
VX = speed
VY = speed
VZ = None
AX = None
AY = None
AZ = None
Category = ptcType
Style = None
Color = vehicleColor
Ego = None

[EgoColumnSettings]

[ObjColumnSettings]

[CommonSeriesRules]
Time = lambda x: x / 1000
Length = lambda x: x / 100
Width = lambda x: x / 100
Height = lambda x: x / 100
Yaw = lambda x: (90.0 - x * 0.0125) %% 360.0
ID = lambda x: x
Category = lambda x: {0:'unknown', 1:'motor', 2:'non-motor', 3:'pedestrian', 4:'rsu'}.get(x,x)
Color = lambda x: {0:'white',1:'gray',3:'yellow',4:'pink',5:'purple',6:'green',7:'blue',8:'red',9:'brown',10:'orange',11:'black'}.get(x,x)

[EgoSeriesRules]

[ObjSeriesRules]

[CommorMultiSeriesRules]
VX = lambda x: x['speed'] * 0.02 * math.cos(math.radians(x['heading']))
VY = lambda x: x['speed'] * 0.02 * math.sin(math.radians(x['heading']))
Ego = lambda x: 'Y' if x['ptcId'] == 0 else 'N'
