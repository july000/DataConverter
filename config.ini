[FileType]
type = csv

[General]
input_file = ''
output_file = 'G:\\CyTrafficEditor\\CyTraffic\\data\\test_cases\\ec6\\meixing_pack_can_data\\test\\2\\auto_test_flat.csv'

[Position]
relative_position = True
ego_file = 'G:\\CyTrafficEditor\\CyTraffic\\data\\test_cases\\ec6\\meixing_pack_can_data\\test\\2\\CAN2\\CAN_3_enu_84.csv'
obj_file = 'G:\\CyTrafficEditor\\CyTraffic\\data\\test_cases\\ec6\\meixing_pack_can_data\\test\\2\\Perception_log2_REF_obj_ref.csv'

[Security]
encrypted = True

[Json]
; 如果FileType的type是json, 需要指定record_path与meta, 这两个是pandas.json_normalize()中需要的参数；如果type是其他类型, 则这个section不需要写任何东西
; record_path = ['data', 'rsms', 'participants']
; meta = [['data', 'timestamp'], ['data', 'rsms', 'refPos', 'lon'], ['data', 'rsms', 'refPos', 'lat']]

[Const]
OriginLat = 40.0891
OriginLon = 116.488

[ColumnSettings]
ID = ID
Time = Time
PositionX = PositionX
PositionY = PositionY
PositionZ = PositionZ
Length = Length
Width = Width
Height = Height
Yaw = Yaw
Pitch = Pitch
Roll = Roll
VX = VX
VY = VY
VZ = VZ
AX = AX
AY = AY
AZ = AZ
Category = Category
Style = Style
Color = Color
Ego = Ego

[EgoColumnSettings]
ID = ID
Time = Time
PositionX = PositionX
PositionY = PositionY
PositionZ = PositionZ
Length = Length
Width = Width
Height = Height
Yaw = Yaw
Pitch = Pitch
Roll = Roll
VX = VX
VY = VY
VZ = VZ
AX = AX
AY = AY
AZ = AZ
Category = Category
Style = Style
Color = Color
Ego = Ego

[ObjColumnSettings]
ID = ID
Time = Time
PositionX = PositionX
PositionY = PositionY
PositionZ = PositionZ
Length = Length
Width = Width
Height = Height
Yaw = Yaw
Pitch = Pitch
Roll = Roll
VX = VX
VY = VY
VZ = VZ
AX = AX
AY = AY
AZ = AZ
Category = Category
Style = Style
Color = Color
Ego = Ego

[CommonSeriesRules]
Time = lambda x: x / 1000
Length = lambda x: x / 100
Width = lambda x: x / 100
Height = lambda x: x / 100
ID = lambda x: x

[EgoSeriesRules]
Ego = lambda x: 'Y' if x[0] == 0 else 'N'
Yaw = lambda x: (90.0 - x * 0.0125) %% 360.0

[ObjSeriesRules]
; Ego = lambda x: 'N'
Category = lambda x: {0:'unknown', 1:'motor', 2:'non-motor', 3:'pedestrian', 4:'rsu'}.get(x,x)
Color = lambda x: {0:'white',1:'gray',3:'yellow',4:'pink',5:'purple',6:'green',7:'blue',8:'red',9:'brown',10:'orange',11:'black'}.get(x,x)

[CommorMultiSeriesRules]
VX = lambda x: x['speed'] * 0.02 * math.cos(math.radians(x['heading']))
VY = lambda x: x['speed'] * 0.02 * math.sin(math.radians(x['heading']))
Ego = lambda x: 'Y' if x['ptcId'] == 0 else 'N'

${IF:encrypted}
PositionX, PositionY, PositionZ = lambda x: wgs84_to_gcj02(x['pos.lat'], x['pos.lon'])
PositionX, PositionY, PositionZ = lambda x: pymap3d.geodetic2enu(x['PositionX'], x['PositionY'], 0.0, ${Const:OriginLat}, ${Const:OriginLon}, 0.0)
${ELSE}
PositionX, PositionY, PositionZ = lambda x: pymap3d.geodetic2enu(x['PositionX'], x['PositionY'], 0.0, ${Const:OriginLat}, ${Const:OriginLon}, 0.0)
${ENDIF}